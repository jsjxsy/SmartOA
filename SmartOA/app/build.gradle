apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.protobuf'    //1.应用protobuf插件

def GRPC_VERSION = '1.17.1'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.gx.smartwork"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'x86'//, 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        //极光集成
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "2d0fb3b14eea0fcc7f10b6e8", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        config {
            keyAlias 'smartoa'
            keyPassword 'smartoa1234'
            storeFile file('smartoa.pk12')
            storePassword 'smartoa1234'
        }
    }

    buildTypes {
        release {
            minifyEnabled true //是否混淆
            //是否设置zip对齐优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    dataBinding {
        enabled true
    }
    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "3g"
        //incremental true
        dexInProcess = true
    }

    /*
   * 2.添加sourceSets
   *
   * */
    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
            java {
                srcDir 'src/main/java'
            }
        }
    }

//    if (variant.hasProperty('javaCompileProvider')) {
//        // Android 3.3.0+
//        javaCompileTask = variant.javaCompileProvider.get()
//    } else {
//        javaCompileTask = variant.javaCompile
//    }
}
android.applicationVariants.all { variant ->
//    variant.outputs.each { output ->
//        println("$output")
//    }
//    if (variant.hasProperty('javaCompileProvider')) {
//        // Android 3.3.0+
//        javaCompileTask = variant.javaCompileProvider.get()
//    } else {
//        javaCompileTask = variant.javaCompile
//    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.whenTaskAdded {
    task ->
        if (task.name.contains("lint") ||
                task.name.contains("clean") ||
                task.name.contains("Aidl")) {
            task.enabled = false
        }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    //retrofit coroutines
    implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
    //KTX
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //androidx
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.navigation:navigation-fragment:2.1.0'
    implementation 'androidx.navigation:navigation-ui:2.1.0'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.1.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.1.0'
    //glide
    implementation 'com.github.bumptech.glide:glide:4.10.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.10.0'
    //glide+okhttp3
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.10.0'
    //adapter
    implementation 'com.drakeet.multitype:multitype:4.0.0'
    //util
    implementation 'com.blankj:utilcodex:1.25.8'
    //okhttp
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    //banner
    implementation 'com.bigkoo:convenientbanner:2.1.5'
    //gson
    implementation 'com.google.code.gson:gson:2.8.6'
    //recycleView
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    //logger
    implementation 'com.orhanobut:logger:2.2.0'
    //GRPC
    implementation "io.grpc:grpc-okhttp:${GRPC_VERSION}"
    implementation "io.grpc:grpc-protobuf-lite:${GRPC_VERSION}"
    implementation "io.grpc:grpc-stub:${GRPC_VERSION}"
    implementation 'javax.annotation:javax.annotation-api:1.2'
    //WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.4.0"
    //json
    implementation('com.alibaba:fastjson:1.2.38')
    //
    implementation 'org.bitbucket.b_c:jose4j:0.6.5'
    implementation 'com.auth0:java-jwt:3.8.1'
    //cropper
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    //intro
    implementation 'com.github.AppIntro:AppIntro:5.1.0'
    //spinner
    implementation 'com.github.arcadefire:nice-spinner:1.4.4'
    //test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(path: ':webview')
    implementation project(path: ':push')
    implementation project(path: ':custom_ldialog')
    implementation project(path: ':ldialog')
    implementation project(path: ':share')
    implementation project(path: ':map')
    implementation project(path: ':eventbus')
}


/*
* 4.添加protobuf
* */
protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.4.0' }
    plugins {
        javalite { artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0" }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${GRPC_VERSION}" // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc { // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}
