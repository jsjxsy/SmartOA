apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

def config = rootProject.extensions.findByName("ext")


//如果有用到kapt添加如下配置
kapt {
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion config.android['compileSdkVer']
    buildToolsVersion config.android['buildToolsVer']

    signingConfigs {
        release {
            keyAlias 'smartoa'
            keyPassword 'smartoa1234'
            storeFile file('smartoa.pk12')
            storePassword 'smartoa1234'
        }
    }

    defaultConfig {
        applicationId "com.gx.smartwork"
        minSdkVersion config.android['minSdkVer']
        targetSdkVersion config.android['targetSdkVer']
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'x86'//, 'armeabi-v7a', 'arm64-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        //极光集成
        manifestPlaceholders = [JPUSH_APPKEY: "2d0fb3b14eea0fcc7f10b6e8"]//JPush 上注册的包名对应的 Appkey.
        signingConfig signingConfigs.release
        multiDexEnabled = true
        //router 配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
            if (variant.buildType.name == 'debug') {
                outputFileName = "app_debug_${date}_${variant.productFlavors[0].name}_${versionName}.apk"
            }
            if (variant.buildType.name == 'dev') {
                outputFileName = "app_dev_${date}_${variant.productFlavors[0].name}_${versionName}.apk"
            }
            if (variant.buildType.name == 'release') {
                outputFileName = "app_release_${date}_${variant.productFlavors[0].name}_${versionName}.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            resValue("string", "app_name", "航天易办公")
            manifestPlaceholders = [JPUSH_PKGNAME: "com.gx.smartwork"]
            minifyEnabled true //是否混淆
            //是否设置zip对齐优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexEnabled = true
        }
        dev {
            applicationIdSuffix ".dev" //影响推送
            resValue("string", "app_name", "易办公(开发版)")
            manifestPlaceholders = [JPUSH_PKGNAME: "com.gx.smartwork.dev"]
            //png 压缩
            aaptOptions.cruncherEnabled = false
            splits.abi.enable = false
            splits.density.enable = false
            minifyEnabled false
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug" //影响推送
            resValue("string", "app_name", "易办公(测试版)")
            manifestPlaceholders = [JPUSH_PKGNAME: "com.gx.smartwork.debug"]
            //png 压缩
            aaptOptions.cruncherEnabled = false
            splits.abi.enable = false
            splits.density.enable = false
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }
    dataBinding {
        enabled true
    }
    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "4g"
        //incremental true
        dexInProcess = true
        maxProcessCount 8
    }

    lintOptions {
        baseline file("lint-baseline.xml")
        checkReleaseBuilds false
        abortOnError false
        //ignoreWarnings true
    }

    //flavorDimensions('abi', 'version')
    flavorDimensions('versionCode')
    productFlavors {
        XiaoMi {
            manifestPlaceholders = [JPUSH_CHANNEL: "XiaoMi"]
            dimension 'versionCode'
        }
        HuaWei {
            manifestPlaceholders = [JPUSH_CHANNEL: "HuaWei"]
            dimension 'versionCode'
        }
        BaiDu {
            manifestPlaceholders = [JPUSH_CHANNEL: "BaiDu"]
            dimension 'versionCode'
        }
        Tencent {
            manifestPlaceholders = [JPUSH_CHANNEL: "Tencent"]
            dimension 'versionCode'
        }
    }

}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.4'
    //KTX
    implementation config.dependencies['core_ktx']
    //androidx
    implementation config.dependencies['appcomat']
    implementation config.dependencies['legacy']
    //constraintLayout
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    //lifecycle
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    //svg
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    //navigation
    implementation 'androidx.navigation:navigation-fragment:2.2.1'
    implementation 'androidx.navigation:navigation-ui:2.2.1'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'
    //WebSocket
    implementation 'org.java-websocket:Java-WebSocket:1.4.1'

    //litePal
    implementation 'org.litepal.android:kotlin:3.0.0'
    //test java
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation config.dependencies['junit']
    //test android
    androidTestImplementation config.dependencies['ext_junit']
    androidTestImplementation config.dependencies['espresso']
    //dependence project
    implementation project(path: ':lib_webview')
    implementation project(path: ':lib_push')
    implementation project(path: ':lib_custom_ldialog')
    implementation project(path: ':lib_ldialog')
    implementation project(path: ':lib_share')
    implementation project(path: ':lib_map')
    implementation project(path: ':lib_eventbus')
    implementation project(path: ':lib_common')
    implementation project(path: ':lib_http')
    implementation project(path: ':lib_log')
    implementation project(path: ':lib_database')
    implementation project(path: ':lib_widget')
    implementation project(path: ':lib_image')
    implementation project(path: ':lib_base')
    implementation project(path: ':lib_proto')
    implementation project(path: ':lib_arouter')
    if (!isModule.toBoolean()) {
        implementation project(path: ':module_setting')
        implementation project(path: ':module_smart_house')
        implementation project(path: ':module_login')
        implementation project(path: ':module_repair')
    }
    kapt 'com.alibaba:arouter-compiler:1.2.2'
}
